//Objectives:
// 1. students will understand how to use constructor functions to create objects.
// 2. students will understand be able to identify what a variable equals to based on JavaScript Scope.
// 3. students will understand how the window and document works in js
// 4. students will be able to use jQuery to make their webpages interactive
// 5. students will be ready to do their first project for this class - a game 

//window/document, jQuery, first project given

//I DO - 5 minutes

var F = function() {
  this.name = "sean"
}
var f = new F();
console.log("my name is " + f.name);

var Dessert = function(nme, ingrdnts, rating) {
	this.name = nme;
	this.ingredients = ingrdnts;
	this.ratingOutOfTen = rating;
	this.chancePavanWillEat = function(){
		return this.ratingOutOfTen * 5;
	}
}

var puddingCake = new Dessert('chocolate pudding cake', ['chocolate', 'pudding', 'cake'], 7);
var vanillaPuddingCake = new Dessert('vanilla pudding cake', ['vanilla', 'pudding', 'cake'], 6);

//YOU DO- 15 minutes
	/*
		For those who don't remember (or choose to forget), Tamagotchis were "digital pets" that you could carry around with you and feed them, clean up after them, pet them, and try to keep them happy.

		Make a Tamagotchi constructor. Give it the following properties:
		1. a hungry property (initially false)
		2. a sick property (initially false)
		3. an age of 0

		and give it the following methods:

		feed() - if hungry is true, print "That was yummy!" and set hungry to false. If hungry is false, print "No thanks, I'm full." and set hungry to true.
		sleep() - prints out "zzzzzzz" (use as many z's as you want)
		medicate() - if sick is true, print "I feel much better!" and set sick to false. If sick is false, print "No thanks, I feel fine." and set sick to true.
		increaseAge() - increase the age by one and print "Happy Birthday to me! I am " + age + " years old!"
		Now make a variable named dog that is set to a new Tamagotchi.

		Add the following methods to it:
		1. bark() - prints out "ruff ruff
		2. goOutside() - prints out "I own that tree now!"

		Make a variable named cat that is set to a new Tamagotchi. Add the following methods to it:
		1. meow() - prints out "Meow!"
		2. useLitterBox() - "Burried treasure!"
	*/

	/*
		//solution

		var Tamagotchi = function() {
		  this.hungry = false;
		  this.sick = false;
		  this.age = 0;

		  this.feed = function() {
		    if(this.hungry === true) {
		      console.log("That was yummy!");
		      this.hungry = false;
		    }
		    else {
		      console.log("No thanks, I'm full.");
		      this.hungry = true;
		    }
		  };

		  this.sleep = function() {
		    console.log("zzzzzzzzzzzz");
		  };

		  this.medicate = function() {
		    if(this.sick === true) {
		      console.log("I feel much better");
		      this.sick = false;
		    }
		    else {
		      console.log("No thanks, I feel fine.");
		      this.sick = true;
		    }
		  };

		  this.increaseAge = function() {
		    this.age ++;
		    console.log("Happy Birthday to me! I am " + this.age +
		    " years old!");
		  };
		};

		var dog = new Tamagotchi();
		dog.bark = function() {
		  console.log("ruff ruff!");
		}

		dog.goOutside = function() {
		  console.log("I own that tree now!");
		}

		var cat = new Tamagotchi();
		cat.meow = function() {
		  console.log("Meow!");
		}
		cat.useLitterBox = function() {
		  console.log("Burried treasure!");
		}
	*/



//SCOPE "it always goes up in JS" -> lexical scope

//I DO - 3 minutes 

	var hamsterName = 'chuck';

	var doSomething = function(){

		alert(hamsterName);

	}

	doSomething();

	//me: when the doSomething function executes - JS looks for the hamsterName variable inside the function - if it doesn't find it then it looks one level above it. It finds it right above it

	//me: *** comment out var hamsterName = 'chuck'; ***

	//engage everyone: think in your head what happens when this executes

	//me: the code fails but what happened? the doSomething function executes, JS looks for hamsterName inside the doSomething function, it doesn't find it, so it goes up one level and it doesn't find it and it throws an error that we're using an undefined variable


//I DO - 3 minutes
	var goodSong = "Digging Deep by Jakalope"

	function whatsThatSong() {
	    var anotherGoodSong = "Hurricane by Halsey";

	    // code here can use anotherGoodSong because song only exists inside this function
	    console.log(anotherGoodSong)
	}

	alert(goodSong); // code here can use goodSong because it's globally available

	//Global means the variable was declared outside of any functions. Global variables can be used anywhere in your code.

	alert(anotherGoodSong);  // code here can not use anotherGoodSong, because anotherGoodSong is only available inside the whatsThatsong function - in other words anotherGoodSong is locally scoped inside the whatsThatSong function

	whatsThatSong();

	alert(anotherGoodSong);  // code here can not use anotherGoodSong - even after you execute the whatsThatSong() function.

	//engage one student: what does executing a function mean in JS? 

//YOU DO - 2 minutes

	//work by yourself - slack me the answer - direct message me not the group

	//What happens when this program gets executed
	var word = "this is global";

	function go() { 
	  var anotherWord = "this is local";
	}

	go();

	alert(anotherWord);

//I DO - 3 minutes
	var word = "this is global";

	function go() { 
	  anotherWord = "this is global too";
	}

	go();

	alert(anotherWord); 

	//engage everyone: explain to your partner why "this is global too" alerts to the screen

	//me: when you don't include var in front of a variable - it forces it to be global - no matter where you put it. It's a best practice to always put var in front of your variables to avoid this. However, in some cases you want a function to over ride a global variable's value. It's important to try your best to avoid this.

	//engage everyone: what if I take out go(); Will this work? No because that line of code needs to execute for the variable to be made globally available.

//You do - 1 minute - explain to your partner what the difference is between these two variables 
	var wearingSunglasses = true; 
	wearingDesignerShoes = false; 

	//answer : nothing - they're both global because they're outside a function - the first one is more proper - but they both essentially are the same because they're ___________ (let them finish this: outside a function).

// I do - 3 minutes 
	var hi = function(){
		hi = 'stuff';
		alert('boom');
	}

	hi();

	hi; 

	hi(); //it's gone

	// we solve this by scoping the variable hi to the hi function
	// variables declared 
		//what do I mean by declared?
		//if a variable is not declared then js goes up to look for it

	  var hi = function(){
	    var hi = 'stuff';
	    alert('boom');
	  }

	  hi();

	  hi; 

	  hi(); //it's BACK

	//ENGAGEMENT TIME (think for a moment what will happen - now in a minute discuss this with your partner)
	var anotherWord = "this is global";

	function go() { 
	  var anotherWord = "this is local";
	  alert(anotherWord)
	}

	go();

	      
// I do - 5 minutes
	//don't copy and paste this - live code it
	    //show how scope1 works and call it
	      //then put in scope2 and call it ...
	var name = "Steven Patrick Morrissey";

	var scope1 = function () {
		
		console.log(name);
		
		var scope2 = function () {
	  	
	  		console.log(name);
	  	
	  		var scope3 = function () {
	    		console.log(name);
	    		var anotherName = 'Jakob Dylan'; // locally scoped
	  		};
	  	
	  		scope3();
		};
		
		scope2();
	};

	scope1();

	alert(anotherName); //won't work




//WINDOW/DOCUMENT

//I do - 10 minutes

	/*
		the window object

		what you see in the browser is the window

		and all your javascript goes right into it

		including all your variables

			when you do alert('hi')

			you're actually doing window.alert('hi');
	*/

//You do - 1 minute
	/*
		think in your head now - don't answer - what is the window based on the dot structure above?

			- it's an object
	*/

//You do - 1 minute
	/*
		answer in your head - not outloud - what's alert in respect to the window?
			- it's a key of the window object and that key points to a function
			- what does it do?
				- it alerts to the screen
	*/

//I do - 5 minutes
	//when you do 
		var catName = 'whiskers'

		function giveMeABand(){
			console.log('hi')
		}

		window.giveMeABand();

	//The window has properties like
		// - innerWidth
		// - innerHeight
			// - if console is open it affects the height 

		// but here's something crazy 
			//where are we right now - we are in a universe 

//You do - 1 minute
	// * type this *

	//AS FRONT END JS developers - your javascript lives in what universe? _____ - talk about it with your partners - right it down
		
		// Answer: the window is your universe


// I do - 10 minutes
	
	// The document is in the window

	// - what is the document - it's all your html
		// 	- converted into a javascript object
		
// One Does - Cold Call

	window.document

	//is this the same as

	document

	//it is because, when you say document, js just attaches it to the window. Why? 

// I do - 10 minutes

	document.title // get's the document's title

	document.body // get's the document's body


	//DOM = document object model
		//Document
			//Element -> html
				//-> Element -> head
					//-> Element -> title
						//-> Text sample page
				//-> Element -> body
					//-> Element -> p
						//-> Text -> Hello World!

// jQUERY 
	// WHY?
		// * Explain the purpose of jQuery as making our code easier to write and cross-browser compatible
		// * Describe a library as a set of utilities/code that you can use for free!
		// * Distinguish between native DOM element objects and jQuery objects
		// * Reference documentation to locate correct library calls for a given operation

	## Outline

	**Beginning** [10 mins]
	* Learning objectives on the board
	* Framing - why jQuery?

	## Lesson Plan

	#### Intro [10 mins]

	Framing:
	* Explain the purpose of jQuery as making our code easier to write and cross-browser compatible
	* Describe a library as a set of utilities/code that you can use for free!

	#### Demo [15 mins]

	1. Bring up some webpage and open the console.
	* Get a reference to an element using jQuery. Call `.text()` on it
	* Describe the difference. Highlight in jQuery we're calling functions...

	#### Exercise [10 mins]
	 * demonstrate the selector that is a string argument to $
	1. Grab all the `p` tags
	* Grab all of the elements with class `.muffin`
	* Grab an `h1`

	Review. 

	#### Groups [30 mins]

	Break the class into 6 groups. Assign each one of the following. Ask them to spend 5 minutes researching the jQuery docs to find the relevant code. No coding, just research. http://api.jquery.com/

	* reading the class of an element
	* appending an element
	* click event listener
	* setting an id
	* reading the input value
	* adding a class to an element

	Collect the answers from each group and write on the board.

	//Grabbing elements


	//Grabbing by name


	//Grabbing all by name

	//Getting things by class, by tag name and class, by tag name and inner tag name

	//In class exercise:
		//select all the p tags in a strong

		// <p>
		// 	<strong class='bands'>Backstreet Boys</strong>
		// </p>
		// <p>
		// 	<strong>cat</strong>
		// </p>
		// <p>
		// 	<strong class='bands'>N'Sync</strong>
		// </p>
		// <p>
		// 	<strong class='bands'>Five</strong>
		// </p>

	//CHILDREN
		<ul id="animalList">
			<li>hi</li>
			<li>thing</li>
			<li>thingie</li>
		</ul>
			
		var list = document.getElementById("animalList")

		list.children
			//what can I do with this now?
			//I can loop over it look for things that have an attribute equal to something and change that attribute based on other variables on the page

	//BY REFERENCE
		//oh, another thing that recently occured to me is that we need to talk about value vs reference because all of these vars that contain DOM objects are reference - that’s why you can change its properties and they change on screen

	//Getting and setting attributes of elements

	//Creating elements


	//Adding elements to the dom
			

	//Editing elements from the dom
		//- grab it from the dom
		//- edit the innerHTML

	//Deleting elements from the dom


jQuery
	- get ga stuff
	- give a guide of the commands for javascript and what they are in jQuery for student reference
	- why use it -> mobile browser differences - they've accounted for - if you use the cdn - most people have it cached already - so your page will be faster
	- people who do DOM things in straight jav

	- on cick is important, on key press important

//Homework: First project given
	// - give them tic tac toe screencasts

		// All screencasts are 5 minutes long max. The first two are optional, but I urge everyone to watch them.

		// - OPTIONAL (TOTAL: 15 minutes):
		// 	- part 1: html of tic tac toe: DONE!
		// 		http://screencast.com/t/gVO69LzuDW1T
		// 	- part 2: using box model and floating for tic tac toe:
		// 		http://screencast.com/t/LS9vNbyWTZ		DONE!
		// 	- part 3 styling the tic tac toe board:
		// 		http://screencast.com/t/9npBPXtDzSC		DONE!

		// - GOOD TO GO OVER - BUT NOT NECESSARY:
		// 	GOING OVER PREVIOUS CONCEPTS
		// 		- part 4 finding a bug and fixing it with debugger - part 1
		// 			http://screencast.com/t/u2aR233Bbonh
		// 		- part 5 finding a bug and fixing it with debugger - part 2
		// 			http://screencast.com/t/IaXFyfgx0o
		// 		- part 6 fixing a bad practice AND going over event handlers AND going over callbacks 
		// 			http://screencast.com/t/9SZmwloI
		// 		- part 7 going over loading the javascript
		// 			http://screencast.com/t/DD7BsbFsyYH
		// 			Read this:
		// 				http://stackoverflow.com/questions/588040/window-onload-vs-document-onload

		// - NECESSARY:
		// 	GOING OVER NEW CONCEPTS (20 minutes)
		// 	- tic tac toe winning formula part 1
		// 		http://screencast.com/t/TBpojJBTng

		// 	- tic tac toe winning formula part 2 
		// 		http://screencast.com/t/oCLksTSRhh

		// 	- tic tac toe winning formula part 3
		// 		http://screencast.com/t/l6kS9kZP6p

		// 	- tic tac toe winning formula part 4
		// 		http://screencast.com/t/fWogR8x9BLI3
		// 		- answer why did it do that

		// 	-  tic tac toe winning formula part 5
		// 		http://screencast.com/t/jcSoHmJvc0
		// 			- I forgot to put the bottom code block into the nested for loop
		// 			- what happens if it stays the way it does?
		// 			- why do we need it in the nested for loop?
		// 				if ((comboCountX == 3) || (comboCountO == 3)){
		// 					alert('you won')
		// 				}

	// - make an rpg game with html, css, JavaScript and jQuery
	// 	- one player
	// 	- story line
	// 	- starts off with 100 health, a sword, 100 dollars. The player can fight
	// - another type of board game

	// - pseduo code in class and submit to me before class ends - please submit it to me by the end of the weekend
